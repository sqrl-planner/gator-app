# Default values are optimized for production to avoid having to configure
# much in production.
#
# However it should be easy to get going in development too. If you see an
# uncommented option that means it's either mandatory to set or it's being
# overwritten in development to make your life easier.

# Rather than use the directory name, let's control the name of the project.
export COMPOSE_PROJECT_NAME=gator

# In development avoid writing out bytecode to __pycache__ directories.
#PYTHONDONTWRITEBYTECODE=
export PYTHONDONTWRITEBYTECODE=true

# You should generate a random string of 99+ characters for this value in prod.
export SECRET_KEY=insecure_key_for_dev

# Which environment is running? These should be "development" or "production".
#export FLASK_ENV=production
export FLASK_ENV=development

# In development with Docker Desktop / Linux the default value should work.
# If you have Docker running in a custom VM, put the VM's IP here instead.
#
# In production you'll want to set this to your domain name or whatever you
# plan to access in your browser, such as example.com.
#export SERVER_NAME=localhost:5000

# The bind port for gunicorn.
#
# Be warned that if you change this value you'll need to change 5000 in both
# your Dockerfile and in a few spots in docker-compose.yml due to the nature of
# how this value can be set (Docker Compose doesn't support nested ENV vars).
#export PORT=5000

# How many workers and threads should your app use? WEB_CONCURRENCY defaults
# to the server's CPU count * 2. That is a good starting point. In development
# it's a good idea to use 1 to avoid race conditions when debugging.
#export WEB_CONCURRENCY=
export WEB_CONCURRENCY=1
#export PYTHON_MAX_THREADS=1

# Do you want code reloading to work with the gunicorn app server?
#export WEB_RELOAD=false
export WEB_RELOAD=true

# The root URL for the Swagger API documentation, relative to the root of the
# web server. If not set or empty, the # Swagger UI will not be available, and
# no documentation will be generated.
export API_DOCS_URL=/docs/

#### MongoDB configuration ####

# Default MongoDB user. You'll want to always set this since the mongo Docker image requires them.
export MONGO_INITDB_ROOT_USERNAME=username
export MONGO_INITDB_ROOT_PASSWORD=password
export MONGO_INITDB_DATABASE=gator

# If you're not using the Docker MongoDB instance, uncomment and update
# MONGODB_USERNAME and MONGODB_PASSWORD. Otherwise, the web server uses
# the credentials passed to docker-compose.yml.
# export MONGODB_USERNAME=username
# export MONGODB_PASSWORD=password

# The hostname defaults to the name of the Docker service. Changes this
# if not using the Docker mongodb instance.
export MONGODB_HOST=mongodb
export MONGODB_PORT=27017
export MONGODB_DB=gator

#### Elasticsearch configuration ###

# The hostname defaults to the name of the Docker service. Changes this
# if not using the Docker elasticsearch instance.
#
# Change the port if you're not using the default 9200.
export ELASTICSEARCH_URL=http://elasticsearch:9200

# Elasticsearch cluster information. Must be used in production even if running
# on a single-node.
# See https://www.elastic.co/guide/en/elasticsearch/reference/current/add-elasticsearch-nodes.html
# for more information on configuring this.
# export cluster.initial_master_nodes=...
# export discovery.seed_hosts=...
# Avoids the production check. Disable this in production.
export discovery.type=single-node

# Should Elasticsearch security features be enabled?
# This is recommend in production
# export xpack.security.enabled=true
export xpack.security.enabled=false

#### Docker configuration ####

# Should Docker restart your containers if they go down in unexpected ways?
#export DOCKER_RESTART_POLICY=unless-stopped
export DOCKER_RESTART_POLICY=no

# What health check test command do you want to run? In development, having it
# curl your web server will result in a lot of log spam, so setting it to
# /bin/true is an easy way to make the health check do basically nothing.
#export DOCKER_WEB_HEALTHCHECK_TEST=curl localhost:5000/up
export DOCKER_WEB_HEALTHCHECK_TEST=/bin/true

# What ip:port should be published back to the Docker host for the app server?
# If you're using Docker Toolbox or a custom VM you can't use 127.0.0.1. This
# is being overwritten in dev to be compatible with more dev environments.
#
# If you have a port conflict because something else is using 5000 then you
# can either stop that process or change 5000 to be something else.
#
# Use the default in production to avoid having gunicorn directly accessible to
# the internet since it'll very likely be behind nginx or a load balancer.
#export DOCKER_WEB_PORT_FORWARD=127.0.0.1:5000
export DOCKER_WEB_PORT_FORWARD=5000

# What volume path should be used? In dev we want to volume mount everything
# so that we can develop our code without rebuilding our Docker images.
#export DOCKER_WEB_VOLUME=./public:/app/public
export DOCKER_WEB_VOLUME=.:/app

# What CPU and memory constraints will be added to your services? When left at
# 0, they will happily use as much as needed.
#export DOCKER_MONGODB_CPUS=0
#export DOCKER_MONGODB_MEMORY=0
#export DOCKER_WEB_CPUS=0
#export DOCKER_WEB_MEMORY=0
#export DOCKER_ELASTICSEARCH_CPUS=0
#export DOCKER_ELASTICSEARCH_MEMORY=0
#export DOCKER_KIBANA_CPUS=0
#export DOCKER_KIBANA_MEMORY=0